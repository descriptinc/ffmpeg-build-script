#!/bin/bash

# HOMEPAGE: https://github.com/markus-perl/ffmpeg-build-script
# LICENSE: https://github.com/markus-perl/ffmpeg-build-script/blob/master/LICENSE

PROGNAME=$(basename "$0")
VERSION=1.21.rc5
CWD=$(pwd)
PACKAGES="$CWD/packages"
WORKSPACE="$CWD/workspace"
CFLAGS="-I$WORKSPACE/include"
LDFLAGS="-L$WORKSPACE/lib"
LDEXEFLAGS=""
EXTRALIBS="-ldl -lpthread -lm -lz"
CONFIGURE_OPTIONS=()

is_mac () {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		return 0
	fi

	return 1
}

# read by gcc and cmake
# https://cmake.org/cmake/help/latest/variable/CMAKE_OSX_DEPLOYMENT_TARGET.html
export MACOSX_DEPLOYMENT_TARGET=10.11

# Speed up the process
# Env Var NUMJOBS overrides automatic detection
if [[ -n "$NUMJOBS" ]]; then
	MJOBS="$NUMJOBS"
elif [[ -f /proc/cpuinfo ]]; then
	MJOBS=$(grep -c processor /proc/cpuinfo)
elif is_mac; then
	MJOBS=$(sysctl -n machdep.cpu.thread_count)
	CONFIGURE_OPTIONS=("--enable-videotoolbox")
else
	MJOBS=4
fi

CONFIGURE_OPTIONS+=("--extra-version=beamcube")

make_dir () {
	remove_dir "$1"
	if ! mkdir "$1"; then
		printf "\n Failed to create dir %s" "$1";
		exit 1
	fi
}

remove_dir () {
	if [ -d "$1" ]; then
		rm -r "$1"
	fi
}

download () {
	# download url [filename[dirname]]

	DOWNLOAD_PATH="$PACKAGES"
	DOWNLOAD_FILE="${2:-"${1##*/}"}"

	if [[ "$DOWNLOAD_FILE" =~ "tar." ]]; then
		TARGETDIR="${DOWNLOAD_FILE%.*}"
		TARGETDIR="${3:-"${TARGETDIR%.*}"}"
	else
		TARGETDIR="${3:-"${DOWNLOAD_FILE%.*}"}"
	fi

	if [ ! -f "$DOWNLOAD_PATH/$DOWNLOAD_FILE" ]; then
		echo "Downloading $1 as $DOWNLOAD_FILE"
		curl -L --silent -o "$DOWNLOAD_PATH/$DOWNLOAD_FILE" "$1"

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE. Retrying in 10 seconds";
			sleep 10
			curl -L --silent -o "$DOWNLOAD_PATH/$DOWNLOAD_FILE" "$1"
		fi

		EXITCODE=$?
		if [ $EXITCODE -ne 0 ]; then
			echo ""
			echo "Failed to download $1. Exitcode $EXITCODE";
			exit 1
		fi

		echo "... Done"
	else
		echo "$DOWNLOAD_FILE has already downloaded."
	fi

	make_dir "$DOWNLOAD_PATH/$TARGETDIR"

	if [ -n "$3" ]; then
		if ! tar -xvf "$DOWNLOAD_PATH/$DOWNLOAD_FILE" -C "$DOWNLOAD_PATH/$TARGETDIR" 2>/dev/null >/dev/null; then
			echo "Failed to extract $DOWNLOAD_FILE";
			exit 1
		fi
	else
		if ! tar -xvf "$DOWNLOAD_PATH/$DOWNLOAD_FILE" -C "$DOWNLOAD_PATH/$TARGETDIR" --strip-components 1 2>/dev/null >/dev/null; then
			echo "Failed to extract $DOWNLOAD_FILE";
			exit 1
		fi
	fi

	echo "Extracted $DOWNLOAD_FILE";

	cd "$DOWNLOAD_PATH/$TARGETDIR" || (echo "Error has occurred." ; exit 1)
}

execute () {
	echo "$ $*"

	OUTPUT=$("$@" 2>&1)

	# shellcheck disable=SC2181
	if [ $? -ne 0 ]; then
		echo "$OUTPUT"
		echo ""
		echo "Failed to Execute $*" >&2
		exit 1
	fi
}

build () {
	echo ""
	echo "building $1"
	echo "======================="

	if [ -f "$PACKAGES/$1.done" ]; then
		echo "$1 already built. Remove $PACKAGES/$1.done lockfile to rebuild it."
		return 1
	fi

	return 0
}

command_exists () {
	if ! [[ -x $(command -v "$1") ]]; then
		return 1
	fi

	return 0
}

library_exists () {
	local result=0
	local output=$(pkg-config --exists --print-errors "$1" 2>&1 > /dev/null) || result=$?
	if [ ! "$result" = "0" ]; then
		return 1
	fi

	return 0
}

set_mac_install_name () {
	local name="${2:-$1}"
	if is_mac; then
		execute install_name_tool -id "${WORKSPACE}/lib/$name" $1
	fi
}

build_done () {
	touch "$PACKAGES/$1.done"
}

cleanup () {
	remove_dir "$PACKAGES"
	remove_dir "$WORKSPACE"
	echo "Cleanup done."
	echo ""
}

usage () {
	echo "Usage: $PROGNAME [OPTIONS]"
	echo "Options:"
	echo "  -h, --help          Display usage information"
	echo "      --version       Display version information"
	echo "  -b, --build         Starts the build process"
	echo "  -c, --cleanup       Remove all working dirs"
	echo "  -f, --full-static   Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**"
	echo "                      Note: Because of the NSS (Name Service Switch), glibc does not recommend static links."
	echo ""
}

while (( $# > 0 )); do
	case $1 in
		-h | --help)
			usage
			exit 0
			;;
		--version)
			echo "$VERSION"
			exit 0
			;;
		-*)
			if [[ "$1" == "--build" || "$1" =~ 'b' ]]; then
				bflag='-b'
			fi
			if [[ "$1" == "--cleanup" || "$1" =~ 'c' ]]; then
				cflag='-c'
				cleanup
			fi
			if [[ "$1" == "--full-static" || "$1" =~ 'f' ]]; then
				if is_mac; then
					echo "Error: A full static binary can only be build on Linux."
					exit 1
				fi
				LDEXEFLAGS="-static"
			fi
			shift
			;;
		*)
			usage
			exit 1
			;;
	esac
done

echo "ffmpeg-build-script v$VERSION"
echo "========================="
echo ""

if [ -z "$bflag" ]; then
	if [ -z "$cflag" ]; then
		usage
		exit 1
	fi
	exit 0
fi

echo "Using $MJOBS make jobs simultaneously."

if [ -n "$LDEXEFLAGS" ]; then
	echo "Start the build in full static mode."
fi

mkdir -p "$PACKAGES"
mkdir -p "$WORKSPACE"

export PATH="${WORKSPACE}/bin:$PATH"
PKG_CONFIG_PATH="/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig"
PKG_CONFIG_PATH+=":/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
export PKG_CONFIG_PATH

if ! command_exists "make"; then
	echo "make not installed.";
	exit 1
fi

if ! command_exists "g++"; then
	echo "g++ not installed.";
	exit 1
fi

if ! command_exists "curl"; then
	echo "curl not installed.";
	exit 1
fi


##
## build tools
##

if build "yasm"; then
	download "https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0.tar.gz"
	execute ./configure --prefix="${WORKSPACE}"
	execute make -j $MJOBS
	execute make install
	build_done "yasm"
fi

if build "nasm"; then
	download "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.xz"
	execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
	execute make -j $MJOBS
	execute make install
	build_done "nasm"
fi

if build "pkg-config"; then
	download "https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"
	execute ./configure --silent --prefix="${WORKSPACE}" --with-pc-path="${WORKSPACE}"/lib/pkgconfig --with-internal-glib
	execute make -j $MJOBS
	execute make install
	build_done "pkg-config"
fi

if build "zlib"; then
	download "https://www.zlib.net/zlib-1.2.11.tar.gz"
	execute ./configure --shared --prefix="${WORKSPACE}"
	execute make -j $MJOBS
	execute make install
	build_done "zlib"
fi

if build "meson"; then
	execute python3 -m pip install meson ninja
	build_done "meson"
fi

if build "cmake"; then
	download "https://cmake.org/files/v3.18/cmake-3.18.4.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --system-zlib
	execute make -j $MJOBS
	execute make install
	build_done "cmake"
fi


##
## video library
##

if build "x264"; then
	download "https://code.videolan.org/videolan/x264/-/archive/stable/x264-stable.tar.bz2"

	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		execute ./configure --prefix="${WORKSPACE}" --enable-shared --enable-pic CXXFLAGS="-fPIC"
	else
		execute ./configure --prefix="${WORKSPACE}" --enable-shared --enable-pic
	fi

	execute make -j $MJOBS
	execute make install
	execute make install-lib-static

	build_done "x264"
fi
CONFIGURE_OPTIONS+=("--enable-libx264")

if build "x265"; then
	download "https://github.com/videolan/x265/archive/Release_3.5.tar.gz" "x265-3.5.tar.gz"
	cd build/linux || exit
	execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=on -DBUILD_SHARED_LIBS=on ../../source
	execute make -j $MJOBS

	set_mac_install_name "libx265.198.dylib"

	execute make install

	if [ -n "$LDEXEFLAGS" ]; then
		sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${WORKSPACE}/lib/pkgconfig/x265.pc" # The -i.backup is intended and required on MacOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
	fi

	build_done "x265"
fi
CONFIGURE_OPTIONS+=("--enable-libx265")

if build "libvpx"; then
	download "https://github.com/webmproject/libvpx/archive/v1.9.0.tar.gz" "libvpx-1.9.0.tar.gz"

	EXTRA_FLAG=""

	if is_mac; then
		echo "Applying Darwin patch"
		sed "s/,--version-script//g" build/make/Makefile > build/make/Makefile.patched
		sed "s/-Wl,--no-undefined -Wl,-soname/-Wl,-undefined,error -Wl,-install_name/g" build/make/Makefile.patched > build/make/Makefile
		EXTRA_FLAG="--target=x86_64-darwin15-gcc"
	fi


	execute ./configure --prefix="${WORKSPACE}" --disable-unit-tests --enable-shared --disable-static --as=yasm "${EXTRA_FLAG}"
	execute make -j $MJOBS

	set_mac_install_name "libvpx.6.dylib"

	execute make install

	build_done "libvpx"
fi
CONFIGURE_OPTIONS+=("--enable-libvpx")

if build "xvidcore"; then
	download "https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz"
	cd build/generic || exit
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then
		execute rm "${WORKSPACE}/lib/libxvidcore.4.dylib"
	fi

	if [[ -f ${WORKSPACE}/lib/libxvidcore.so ]]; then
		execute rm "${WORKSPACE}"/lib/libxvidcore.so*
	fi

	build_done "xvidcore"
fi
CONFIGURE_OPTIONS+=("--enable-libxvid")

if build "vid_stab"; then
	download "https://github.com/georgmartius/vid.stab/archive/v1.1.0.tar.gz" "vid.stab-1.1.0.tar.gz"
	execute cmake -DBUILD_SHARED_LIBS=on -DCMAKE_INSTALL_PREFIX:PATH="${WORKSPACE}" -DUSE_OMP=OFF -DENABLE_SHARED=on .
	execute make
	execute make install

	set_mac_install_name "${WORKSPACE}/lib/libvidstab.1.1.dylib" "libvidstab.1.1.dylib"

	build_done "vid_stab"
fi
CONFIGURE_OPTIONS+=("--enable-libvidstab")

if build "twolame"; then
	download "https://downloads.sourceforge.net/twolame/twolame-0.4.0.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "twolame"
fi
CONFIGURE_OPTIONS+=("--enable-libtwolame")


if build "av1"; then
	download "https://aomedia.googlesource.com/aom/+archive/430d58446e1f71ec2283af0d6c1879bc7a3553dd.tar.gz" "av1.tar.gz" "av1"
	make_dir "$PACKAGES"/aom_build
	cd "$PACKAGES"/aom_build || exit
	execute cmake -DBUILD_SHARED_LIBS=1 -DENABLE_TESTS=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib "$PACKAGES"/av1
	execute make -j $MJOBS

	set_mac_install_name "libaom.2.0.0.dylib" "libaom.2.dylib"

	execute make install

	build_done "av1"
fi
CONFIGURE_OPTIONS+=("--enable-libaom")

if build "dav1d"; then
	download "https://code.videolan.org/videolan/dav1d/-/archive/0.7.1/dav1d-0.7.1.tar.gz"
	make_dir "$PACKAGES"/dav1d_build
	cd "$PACKAGES"/dav1d_build || exit
	execute meson --prefix="${WORKSPACE}" ../dav1d-0.7.1
	execute ninja
	execute ninja install

	build_done "dav1d"
fi
CONFIGURE_OPTIONS+=("--enable-libdav1d")

if build "zimg"; then
	download "https://github.com/sekrit-twc/zimg/archive/release-3.0.1.tar.gz"
	execute autoreconf -i
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "zimg"
fi
CONFIGURE_OPTIONS+=("--enable-libzimg")

##
## audio library
##

if build "opencore"; then
	download "https://deac-riga.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.5.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "opencore"
fi
CONFIGURE_OPTIONS+=("--enable-libopencore_amrnb" "--enable-libopencore_amrwb")

if build "lame"; then
	download "https://netcologne.dl.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz"
	sed "/lame_init_old/d" include/libmp3lame.sym > include/libmp3lame.sym.patched
	mv include/libmp3lame.sym.patched include/libmp3lame.sym
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "lame"
fi
CONFIGURE_OPTIONS+=("--enable-libmp3lame")

if build "opus"; then
	download "https://archive.mozilla.org/pub/opus/opus-1.3.1.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "opus"
fi
CONFIGURE_OPTIONS+=("--enable-libopus")

if build "libogg"; then
	download "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.3.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install
	build_done "libogg"
fi

if build "libvorbis"; then
	download "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.6.tar.gz"
	OGG_CFLAGS="-I${WORKSPACE}/include/ogg" OGG_LIBS="-L${WORKSPACE}/lib -logg" execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --disable-static --enable-shared --disable-oggtest
	execute make -j $MJOBS
	execute make install

	build_done "libvorbis"
fi
CONFIGURE_OPTIONS+=("--enable-libvorbis")

if build "libtheora"; then
	download "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.tar.gz"
	sed "s/-fforce-addr//g" configure > configure.patched
	chmod +x configure.patched
	mv configure.patched configure
	OGG_CFLAGS="-I${WORKSPACE}/include/ogg" OGG_LIBS="-L${WORKSPACE}/lib -logg" execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --with-vorbis-libraries="${WORKSPACE}"/lib --with-vorbis-includes="${WORKSPACE}"/include/ --disable-static --enable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec
	execute make -j $MJOBS
	execute make install

	build_done "libtheora"
fi
CONFIGURE_OPTIONS+=("--enable-libtheora")

if build "shine"; then
	download "https://github.com/toots/shine/archive/3.1.1.tar.gz" "shine-3.1.1.tar.gz"
	execute autoreconf -i
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "shine"
fi
CONFIGURE_OPTIONS+=("--enable-libshine")

if build "soxr"; then
	download "http://ftp.debian.org/debian/pool/main/libs/libsoxr/libsoxr_0.1.3.orig.tar.xz" "soxr-0.1.3.tar.xz"
	make_dir build
	cd build || exit
	execute cmake .. -DWITH_OPENMP:BOOL=OFF -Wno-dev -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS:BOOL=ON
	execute make -j $MJOBS
	execute make install

	build_done "soxr"
fi
CONFIGURE_OPTIONS+=("--enable-libsoxr")

if build "speex"; then
	download "http://downloads.us.xiph.org/releases/speex/speex-1.2.0.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "speex"
fi
CONFIGURE_OPTIONS+=("--enable-libspeex")

##
## image library
##

if build "libwebp"; then
	download "https://github.com/webmproject/libwebp/archive/v1.1.0.tar.gz" "libwebp-1.1.0.tar.gz"
	make_dir build
	cd build || exit
	execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=ON -DENABLE_STATIC=OFF ../
	execute make -j $MJOBS
	execute make install

	build_done "libwebp"
fi
CONFIGURE_OPTIONS+=("--enable-libwebp")

if build "openjpeg"; then
	download "https://github.com/uclouvain/openjpeg/archive/v2.3.1.tar.gz" "openjpeg-v2.3.1.tar.gz"
	make_dir build
	cd build || exit
	execute cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DBUILD_SHARED_LIBS:bool=on
	execute make -j $MJOBS
	execute make install

	build_done "openjpeg"
fi
CONFIGURE_OPTIONS+=("--enable-libopenjpeg")


##
## other library
##

if build "libsdl"; then
	download "https://www.libsdl.org/release/SDL2-2.0.12.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "libsdl"
fi

if build "snappy"; then
	download "https://github.com/google/snappy/archive/1.1.8.tar.gz"
	make_dir build
	cd build || exit
	execute cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DBUILD_SHARED_LIBS:bool=on
	execute make -j $MJOBS

	set_mac_install_name "libsnappy.1.1.8.dylib" "libsnappy.1.dylib"

	execute make install

	build_done "snappy"
fi
CONFIGURE_OPTIONS+=("--enable-libsnappy")

if build "xz"; then
	download "https://tukaani.org/xz/xz-5.2.5.tar.gz"
	execute ./configure --prefix="${WORKSPACE}" --enable-shared --disable-static
	execute make -j $MJOBS
	execute make install

	build_done "xz"
fi

##
## HWaccel library
##

if [[ "$OSTYPE" == "linux-gnu" ]]; then
	if command_exists "nvcc" ; then
		if build "nv-codec"; then
			download "https://github.com/FFmpeg/nv-codec-headers/releases/download/n11.0.10.0/nv-codec-headers-11.0.10.0.tar.gz"
			execute make PREFIX="${WORKSPACE}"
			execute make install PREFIX="${WORKSPACE}"
			build_done "nv-codec"
		fi
		CFLAGS+=" -I/usr/local/cuda/include"
		LDFLAGS+=" -L/usr/local/cuda/lib64"
		CONFIGURE_OPTIONS+=("--enable-cuda-nvcc" "--enable-cuvid" "--enable-nvenc" "--enable-cuda-llvm")

		if [ -z "$LDEXEFLAGS" ]; then
			CONFIGURE_OPTIONS+=("--enable-libnpp") # Only libnpp cannot be statically linked.
		fi

		# https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
		CONFIGURE_OPTIONS+=("--nvccflags=-gencode arch=compute_52,code=sm_52")
	fi

	# Vaapi doesn't work well with static links FFmpeg.
	if [ -z "$LDEXEFLAGS" ]; then
		# If the libva development SDK is installed, enable vaapi.
		if library_exists "libva" ; then
			if build "vaapi"; then
				build_done "vaapi"
			fi
			CONFIGURE_OPTIONS+=("--enable-vaapi")
		fi
	fi
fi


##
## FFmpeg
##

build "ffmpeg"
download "https://ffmpeg.org/releases/ffmpeg-4.3.1.tar.bz2"
# shellcheck disable=SC2086
./configure "${CONFIGURE_OPTIONS[@]}" \
	--disable-doc \
	--disable-static \
	--enable-gpl \
	--enable-pthreads \
	--enable-shared \
	--enable-version3 \
	--extra-cflags="${CFLAGS}" \
	--extra-ldexeflags="${LDEXEFLAGS}" \
	--extra-ldflags="${LDFLAGS}" \
	--extra-libs="${EXTRALIBS}" \
	--pkgconfigdir="$WORKSPACE/lib/pkgconfig" \
	--pkg-config-flags="--static" \
	--prefix="${WORKSPACE}" \
	--disable-stripping \
	--enable-debug

execute make -j $MJOBS

if is_mac; then
	execute dsymutil libavcodec/libavcodec.dylib -o libavcodec.dSYM
	execute dsymutil libavdevice/libavdevice.dylib -o libavdevice.dSYM
	execute dsymutil libavfilter/libavfilter.dylib -o libavfilter.dSYM
	execute dsymutil libavformat/libavformat.dylib -o libavformat.dSYM
	# we're not building this one
	# execute dsymutil libavresample/libavresample.dylib -o libavresample.dSYM
	execute dsymutil libavutil/libavutil.dylib -o libavutil.dSYM
	execute dsymutil libpostproc/libpostproc.dylib -o libpostproc.dSYM
	execute dsymutil libswresample/libswresample.dylib -o libswresample.dSYM
	execute dsymutil libswscale/libswscale.dylib -o libswscale.dSYM
fi

if [[ -n "$SENTRY_AUTH_TOKEN" ]]; then
	# TODO: install sentry-cli when running on CI
	sentry-cli --auth-token $SENTRY_AUTH_TOKEN upload-dif --org descript-inc --project descript-electron .
fi

# strip symbols from binaries (i.e., make them smaller)
execute strip -x libavcodec/libavcodec.dylib
execute strip -x libavdevice/libavdevice.dylib
execute strip -x libavfilter/libavfilter.dylib
execute strip -x libavformat/libavformat.dylib
execute strip -x libavutil/libavutil.dylib
execute strip -x libpostproc/libpostproc.dylib
execute strip -x libswresample/libswresample.dylib
execute strip -x libswscale/libswscale.dylib
execute strip -x ffmpeg
execute strip -x ffprobe
execute strip -x ffplay

execute make install

INSTALL_FOLDER="/usr/bin"
if is_mac; then
INSTALL_FOLDER="/usr/local/bin"
fi

echo ""
echo "Building done. The following binaries can be found here:"
echo "- ffmpeg: $WORKSPACE/bin/ffmpeg"
echo "- ffprobe: $WORKSPACE/bin/ffprobe"
echo "- ffplay: $WORKSPACE/bin/ffplay"

echo ""

if [[ "$AUTOINSTALL" == "yes" ]]; then
	if command_exists "sudo"; then
		sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
		sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
		sudo cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		echo "Done. FFmpeg is now installed to your system."
	else
		cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
		cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
		sudo cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		echo "Done. FFmpeg is now installed to your system."
	fi
elif [[ ! "$SKIPINSTALL" == "yes" ]]; then
	read -r -p "Install these binaries to your $INSTALL_FOLDER folder? Existing binaries will be replaced. [Y/n] " response
	case $response in
	[yY][eE][sS]|[yY])
		if command_exists "sudo"; then
			sudo cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
			sudo cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
			sudo cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		else
			cp "$WORKSPACE/bin/ffmpeg" "$INSTALL_FOLDER/ffmpeg"
			cp "$WORKSPACE/bin/ffprobe" "$INSTALL_FOLDER/ffprobe"
			cp "$WORKSPACE/bin/ffplay" "$INSTALL_FOLDER/ffplay"
		fi
		echo "Done. FFmpeg is now installed to your system."
		;;
	esac
fi

cd $CWD
if is_mac; then
	node copy_mac_libs.js
	cd "$WORKSPACE/mac"
	execute zip --symlinks -r "ffmpeg-ffprobe-shared-darwin-x86_64.${VERSION}.zip" *
fi

exit 0
